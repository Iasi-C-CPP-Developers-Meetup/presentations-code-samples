/*
* generated by Xtext
*/

package ro.meetup.cpp.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DbDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPersonsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPersonsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPersonsPersonParserRuleCall_2_0 = (RuleCall)cPersonsAssignment_2.eContents().get(0);
		private final Keyword cMeetingsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMeetingsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMeetingsMeetingParserRuleCall_5_0 = (RuleCall)cMeetingsAssignment_5.eContents().get(0);
		
		//Model:
		//	"persons" ":" persons+=Person* "meetings" ":" meetings+=Meeting*;
		public ParserRule getRule() { return rule; }

		//"persons" ":" persons+=Person* "meetings" ":" meetings+=Meeting*
		public Group getGroup() { return cGroup; }

		//"persons"
		public Keyword getPersonsKeyword_0() { return cPersonsKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//persons+=Person*
		public Assignment getPersonsAssignment_2() { return cPersonsAssignment_2; }

		//Person
		public RuleCall getPersonsPersonParserRuleCall_2_0() { return cPersonsPersonParserRuleCall_2_0; }

		//"meetings"
		public Keyword getMeetingsKeyword_3() { return cMeetingsKeyword_3; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//meetings+=Meeting*
		public Assignment getMeetingsAssignment_5() { return cMeetingsAssignment_5; }

		//Meeting
		public RuleCall getMeetingsMeetingParserRuleCall_5_0() { return cMeetingsMeetingParserRuleCall_5_0; }
	}

	public class Model2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model2");
		private final Keyword cBlaKeyword = (Keyword)rule.eContents().get(1);
		
		//Model2:
		//	"bla";
		public ParserRule getRule() { return rule; }

		//"bla"
		public Keyword getBlaKeyword() { return cBlaKeyword; }
	}

	public class PersonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Person");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFirstNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFirstNameIDTerminalRuleCall_2_0 = (RuleCall)cFirstNameAssignment_2.eContents().get(0);
		private final Assignment cLastNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLastNameIDTerminalRuleCall_3_0 = (RuleCall)cLastNameAssignment_3.eContents().get(0);
		private final Assignment cBirthDateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBirthDateDATETerminalRuleCall_4_0 = (RuleCall)cBirthDateAssignment_4.eContents().get(0);
		private final Assignment cAddressAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAddressSTRINGTerminalRuleCall_5_0 = (RuleCall)cAddressAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Person:
		//	name=ID "{" firstName=ID lastName=ID birthDate=DATE address=STRING "}";
		public ParserRule getRule() { return rule; }

		//name=ID "{" firstName=ID lastName=ID birthDate=DATE address=STRING "}"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//firstName=ID
		public Assignment getFirstNameAssignment_2() { return cFirstNameAssignment_2; }

		//ID
		public RuleCall getFirstNameIDTerminalRuleCall_2_0() { return cFirstNameIDTerminalRuleCall_2_0; }

		//lastName=ID
		public Assignment getLastNameAssignment_3() { return cLastNameAssignment_3; }

		//ID
		public RuleCall getLastNameIDTerminalRuleCall_3_0() { return cLastNameIDTerminalRuleCall_3_0; }

		//birthDate=DATE
		public Assignment getBirthDateAssignment_4() { return cBirthDateAssignment_4; }

		//DATE
		public RuleCall getBirthDateDATETerminalRuleCall_4_0() { return cBirthDateDATETerminalRuleCall_4_0; }

		//address=STRING
		public Assignment getAddressAssignment_5() { return cAddressAssignment_5; }

		//STRING
		public RuleCall getAddressSTRINGTerminalRuleCall_5_0() { return cAddressSTRINGTerminalRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class RoleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Role");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cOrganizerKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMemberKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPresenterKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGuestKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cModeratorKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//Role:
		//	"organizer" | "member" | "presenter" | "guest" | "moderator";
		public ParserRule getRule() { return rule; }

		//"organizer" | "member" | "presenter" | "guest" | "moderator"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"organizer"
		public Keyword getOrganizerKeyword_0() { return cOrganizerKeyword_0; }

		//"member"
		public Keyword getMemberKeyword_1() { return cMemberKeyword_1; }

		//"presenter"
		public Keyword getPresenterKeyword_2() { return cPresenterKeyword_2; }

		//"guest"
		public Keyword getGuestKeyword_3() { return cGuestKeyword_3; }

		//"moderator"
		public Keyword getModeratorKeyword_4() { return cModeratorKeyword_4; }
	}

	public class ParticipantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Participant");
		private final Assignment cPersonAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cPersonPersonCrossReference_0 = (CrossReference)cPersonAssignment.eContents().get(0);
		private final RuleCall cPersonPersonIDTerminalRuleCall_0_1 = (RuleCall)cPersonPersonCrossReference_0.eContents().get(1);
		
		//Participant:
		//	person=[Person];
		public ParserRule getRule() { return rule; }

		//person=[Person]
		public Assignment getPersonAssignment() { return cPersonAssignment; }

		//[Person]
		public CrossReference getPersonPersonCrossReference_0() { return cPersonPersonCrossReference_0; }

		//ID
		public RuleCall getPersonPersonIDTerminalRuleCall_0_1() { return cPersonPersonIDTerminalRuleCall_0_1; }
	}

	public class MeetingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Meeting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDateDATETerminalRuleCall_1_0 = (RuleCall)cDateAssignment_1.eContents().get(0);
		private final Keyword cPresentationsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPresentationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPresentationsPresentationParserRuleCall_4_0 = (RuleCall)cPresentationsAssignment_4.eContents().get(0);
		private final Keyword cParticipantsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cParticipantsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cParticipantsPersonCrossReference_7_0 = (CrossReference)cParticipantsAssignment_7.eContents().get(0);
		private final RuleCall cParticipantsPersonIDTerminalRuleCall_7_0_1 = (RuleCall)cParticipantsPersonCrossReference_7_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Meeting:
		//	"{" date=DATE "presentations" ":" presentations+=Presentation* "participants" ":" participants+=[Person]* "}";
		public ParserRule getRule() { return rule; }

		//"{" date=DATE "presentations" ":" presentations+=Presentation* "participants" ":" participants+=[Person]* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//date=DATE
		public Assignment getDateAssignment_1() { return cDateAssignment_1; }

		//DATE
		public RuleCall getDateDATETerminalRuleCall_1_0() { return cDateDATETerminalRuleCall_1_0; }

		//"presentations"
		public Keyword getPresentationsKeyword_2() { return cPresentationsKeyword_2; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//presentations+=Presentation*
		public Assignment getPresentationsAssignment_4() { return cPresentationsAssignment_4; }

		//Presentation
		public RuleCall getPresentationsPresentationParserRuleCall_4_0() { return cPresentationsPresentationParserRuleCall_4_0; }

		//"participants"
		public Keyword getParticipantsKeyword_5() { return cParticipantsKeyword_5; }

		//":"
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }

		//participants+=[Person]*
		public Assignment getParticipantsAssignment_7() { return cParticipantsAssignment_7; }

		//[Person]
		public CrossReference getParticipantsPersonCrossReference_7_0() { return cParticipantsPersonCrossReference_7_0; }

		//ID
		public RuleCall getParticipantsPersonIDTerminalRuleCall_7_0_1() { return cParticipantsPersonIDTerminalRuleCall_7_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class PresentationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Presentation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_1_0 = (RuleCall)cTitleAssignment_1.eContents().get(0);
		private final Assignment cPresentersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cPresentersPersonCrossReference_2_0 = (CrossReference)cPresentersAssignment_2.eContents().get(0);
		private final RuleCall cPresentersPersonIDTerminalRuleCall_2_0_1 = (RuleCall)cPresentersPersonCrossReference_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Presentation:
		//	"{" title=STRING presenters+=[Person]* "}";
		public ParserRule getRule() { return rule; }

		//"{" title=STRING presenters+=[Person]* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//title=STRING
		public Assignment getTitleAssignment_1() { return cTitleAssignment_1; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_1_0() { return cTitleSTRINGTerminalRuleCall_1_0; }

		//presenters+=[Person]*
		public Assignment getPresentersAssignment_2() { return cPresentersAssignment_2; }

		//[Person]
		public CrossReference getPresentersPersonCrossReference_2_0() { return cPresentersPersonCrossReference_2_0; }

		//ID
		public RuleCall getPresentersPersonIDTerminalRuleCall_2_0_1() { return cPresentersPersonIDTerminalRuleCall_2_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	
	
	private ModelElements pModel;
	private Model2Elements pModel2;
	private PersonElements pPerson;
	private RoleElements pRole;
	private ParticipantElements pParticipant;
	private MeetingElements pMeeting;
	private PresentationElements pPresentation;
	private TerminalRule tDATE;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public DbDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ro.meetup.cpp.dsl.DbDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	"persons" ":" persons+=Person* "meetings" ":" meetings+=Meeting*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Model2:
	//	"bla";
	public Model2Elements getModel2Access() {
		return (pModel2 != null) ? pModel2 : (pModel2 = new Model2Elements());
	}
	
	public ParserRule getModel2Rule() {
		return getModel2Access().getRule();
	}

	//Person:
	//	name=ID "{" firstName=ID lastName=ID birthDate=DATE address=STRING "}";
	public PersonElements getPersonAccess() {
		return (pPerson != null) ? pPerson : (pPerson = new PersonElements());
	}
	
	public ParserRule getPersonRule() {
		return getPersonAccess().getRule();
	}

	//Role:
	//	"organizer" | "member" | "presenter" | "guest" | "moderator";
	public RoleElements getRoleAccess() {
		return (pRole != null) ? pRole : (pRole = new RoleElements());
	}
	
	public ParserRule getRoleRule() {
		return getRoleAccess().getRule();
	}

	//Participant:
	//	person=[Person];
	public ParticipantElements getParticipantAccess() {
		return (pParticipant != null) ? pParticipant : (pParticipant = new ParticipantElements());
	}
	
	public ParserRule getParticipantRule() {
		return getParticipantAccess().getRule();
	}

	//Meeting:
	//	"{" date=DATE "presentations" ":" presentations+=Presentation* "participants" ":" participants+=[Person]* "}";
	public MeetingElements getMeetingAccess() {
		return (pMeeting != null) ? pMeeting : (pMeeting = new MeetingElements());
	}
	
	public ParserRule getMeetingRule() {
		return getMeetingAccess().getRule();
	}

	//Presentation:
	//	"{" title=STRING presenters+=[Person]* "}";
	public PresentationElements getPresentationAccess() {
		return (pPresentation != null) ? pPresentation : (pPresentation = new PresentationElements());
	}
	
	public ParserRule getPresentationRule() {
		return getPresentationAccess().getRule();
	}

	//terminal DATE:
	//	INT "." INT "." INT;
	public TerminalRule getDATERule() {
		return (tDATE != null) ? tDATE : (tDATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DATE"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
