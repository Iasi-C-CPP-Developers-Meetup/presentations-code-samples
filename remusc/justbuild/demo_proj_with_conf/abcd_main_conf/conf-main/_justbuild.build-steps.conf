#// abc,abcd,justbuild syntax
# Main Config
# -------------------- JustBuild - Build steps

# Read about the steps and internal functions in 'info-justbuild-steps.txt'.

# ----------

# Called at the beginning of the top project.
#     Context is initialized to PROJ.
# Commands to run BEFORE starting the whole build.
STEP_A_ADAPT_AT_TOP_PROJ = '
  echo ~~ $PROJ_NAME : adapt at top ...
  // ? code adapt / generate
  // ? coding style, prettify
  // OR use the same hook-script as Abcd
  // bash build_top_begin.sh
'

# Called for every project.
#     Context is initialized to PROJ.
# Commands to run BEFORE this project starts.
STEP_A_ADAPT = '
  echo ~~ $PROJ_NAME : adapt ...
  // ? regen4ide
  // OR use the same hook-script as Abcd
  // bash build_proj_begin.sh
'

# ----------

# Called for every project.
#     Context is initialized to 1st ARCH.
STEP_B_BUILD = '
  /// Commands to run BEFORE this arch starts.
  // setContextArch "..."
  // ...
  // OR use the same hook-script as Abcd, for each ARCH
  // setContextArch "..."
  // bash build_arch_begin.sh

  echo ~~ $PROJ_NAME : build main arch ...

  /// Extract ready-made lists from named containers.
  LS_SRC     = listItem() SRC_MAIN
  LS_HDR     = listItem() SRC_HDR

  LS_SRC_ARCH__ = listPickWP() "$LS_SRC" "$WP_SRC_MAIN_YES" "*.test.*|*.test_fail.*|*.test1.*|*.test1_fail.*"

  LS_OBJ_ARCH__ = jobsCompile() "$CMD_COMPILE" "$LS_SRC_ARCH__"

  S_BIN = jobsLink() "$CMD_LINK" "$LS_OBJ_ARCH__"

  /// Also possible:
  ///   Compile each language in a different way,
  ///   provided that the linker tools handle all object files correctly.
  ///
  // LS_SRC_LANG_C_ARCH__   = listPickWP() "$LS_SRC_ARCH__" "*.c"
  // LS_SRC_LANG_CPP_ARCH__ = listPickWP() "$LS_SRC_ARCH__" "*.cpp"
  // LS_OBJ_ARCH__ += jobsCompile() "$CMD_COMPILE_C"   "$LS_SRC_LANG_C_ARCH__"
  // LS_OBJ_ARCH__ += jobsCompile() "$CMD_COMPILE_CPP" "$LS_SRC_LANG_CPP_ARCH__"
  // S_BIN = jobsLink() "$CMD_LINK" "$LS_OBJ_ARCH__"

  /// Commands to run RIGHT AFTER LINK step for this arch.
  // ? strip executables
  // OR use the same hook-script as Abcd
  // bash build_arch_post_link.sh

  /// Add instructions for your chosen resource compiler.
  ///
  // LS_RES = listItem() SRC_RES
  // ...

  echo ~~ $PROJ_NAME : build main arch : done

  /// ----------

  /// Commands to run AFTER this arch ends.
  // ...
  // OR use the same hook-script as Abcd, for each ARCH
  // bash build_arch_done.sh

  /// Also useful:
  ///    Create a version of the main ARCH for another CPU architecture.
  ///
  // setContextArch() "X2"
  // LS_OBJ_ARCH_X2 = jobsCompile() "$CMD_COMPILE_X2" "$LS_SRC_ARCH__"
  // LS_BIN_X2      = jobsLink() "$CMD_LINK_X2" "$LS_OBJ_ARCH_X2"

  /// Also possible:
  ///    Create a sanitization version of the main ARCH using the same sources.
  ///
  // setContextArch() "SAN"
  // LS_OBJ_ARCH_SAN = jobsCompile() "$CMD_COMPILE_SAN" "$LS_SRC_ARCH__"
  // LS_BIN_SAN      = jobsLink() "$CMD_LINK_SAN" "$LS_OBJ_ARCH_SAN"

  /// ----------

  echo ~~ $PROJ_NAME : build each secondary arch ...

  /// A secondary ARCH may or may not need the binary of the main ARCH.
  ///    Therefore, the main ARCH is built first.
  /// Also useful:
  ///    Create tests for another CPU architecture.
  ///    These tests should be uploaded and run remotely on the target system.

  /// Change the build context for a different ARCH.
  setContextArch() "test"
  setContextBinType() "exe"

  /// Compile & link tests.
  echo ~~ $PROJ_NAME : build tests ...

  /// All test-sources for a single test executable.
  LS_SRC_ARCH_test = listPickWP() "$LS_SRC" "*.test.*"
  LS_OBJ_ARCH_test = jobsCompile() "$CMD_COMPILE" "$LS_SRC_ARCH_test"
  LS_EXE_TEST     += " "
  LS_EXE_TEST     += jobsLink() "$CMD_LINK" "$LS_OBJ_ARCH_test"

  /// Each source to a test executable.
  ///   It should be faster to compile and link directly.
  /// The instructions in CMD_COMPILE_LINK can be set as desired.
  ///   Eg. use or omit intermediary object files.
  LS_SRC_ARCH_test = listPickWP() "$LS_SRC" "*.test1.*"
  LS_EXE_TEST     += " "
  LS_EXE_TEST     += jobsCompileLink() "$CMD_COMPILE_LINK" "$LS_SRC_ARCH_test"

  /// These tests were designed to fail with a specific return code.
  LS_SRC_ARCH_test  = listPickWP() "$LS_SRC" "*.test1_fail.*"
  LS_EXE_TEST_FAIL += " "
  LS_EXE_TEST_FAIL += jobsCompileLink() "$CMD_COMPILE_LINK" "$LS_SRC_ARCH_test"

  /// Wait for all background jobs to finish.
  jobsWait()

  echo ~~ $PROJ_NAME : build each secondary arch : done
'

# ----------

# Called for every project.
#     Context is initialized to 1st ARCH.
#     Set the defined "test" context(s) and launch the tests for each context.
STEP_C_CERTIFY = '
  echo ~~ $PROJ_NAME : certify with tests ...
  export PERF_COUNT=1000000

  setContextArch() "test"
  skipContextForEmptyArgs() "$LS_EXE_TEST" "$LS_EXE_TEST_FAIL"

  /// special tests designed to fail - move them to another list
  _WP_FAIL_TESTS = "*_CoreDump*"
  LS_EXE_TEST_FAIL += " "
  LS_EXE_TEST_FAIL += listPickWP() "$LS_EXE_TEST" "$_WP_FAIL_TESTS"
  LS_EXE_TEST       = listPickWP() "$LS_EXE_TEST" "" "$_WP_FAIL_TESTS"
  // varsDump LS_EXE_TEST*

  /// ? Reset tests data here.
  ///   Eg. reset reports, reset coverage files.

  /// If your tests use shared libraries from your projects:
  ///   the operating system needs to know where to find them.
  /// A script can be created to copy each shared library
  ///   to the appropriate location, before it is used.
  /// Note that for Linux libraries
  ///   the LD_LIBRARY_PATH variable can be used
  ///   to point to non-standard locations of shared libraries.
  ///   LD_LIBRARY_PATH is usually empty.
  /// Note that for Windows libraries
  ///   the PATH variable can be used
  ///   to point to non-standard locations of shared libraries.
  ///   PATH usually already contains '.' on Windows.
  ///
  /// One way to use them during testing:
  /// * Copy them all to a dedicated temporary directory.
  /// * Tell the operating system to use that directory to load them.
  // export TEST_LIB_DIR="$TMP/all_libraries_for_test"
  // copyFilesToDirs() "$LS_HDR_PUB" "$TEST_LIB_DIR"
  // export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$TEST_LIB_DIR"
  // export PATH="$PATH:$TEST_LIB_DIR"
  ///
  /// Another cleaner way to use them during testing,
  ///   assuming that there are no chains of dependencies:
  /// * Copy them where the test executable was built.
  /// * Run the test in the same location.
  /// If there are dependency chains, use a script that,
  ///   depending on the context,
  ///   additionally copies the remaining shared libraries,
  ///   each with the appropriate version.
  LS_PULL_SHLIB = listItem() PULL_SHLIB
  copyExistingFilesToDirs() "$LS_PULL_SHLIB" "."
  _LD_LIBRARY_PATH_SAVED="$LD_LIBRARY_PATH"
  export LD_LIBRARY_PATH="."

  /// Run tests.
  ///   Adapt the specific return code for any test designed to fail.
  jobsRunEach() "$LS_EXE_TEST"
  jobsRunEach() "$LS_EXE_TEST_FAIL" xrt -q --rcc 2=0,0=134,0=3

  /// Wait for all background jobs to finish.
  jobsWait()

  export LD_LIBRARY_PATH="$_LD_LIBRARY_PATH_SAVED"

  /// (optional) Sequential tests. Some tests may want to run alone.
  /// Run them one by one:
  // run special-test-1
  // run special-test-2
  // ...
  /// OR with jobsRunEach() & jobsWait():
  // setJobsMax() 1
  // jobsRunEach() ...
  // jobsWait()
  /// At the end of sequential tests, restore parallel jobs.
  // setJobsMax() 0

  /// Process tests data.
  ///   Eg. code coverage, req coverage, compare with expected results.

  setContextProj()
  echo ~~ $PROJ_NAME : certify with tests : done
'

# ----------

# Called for every project. Intended for 1st ARCH.
#     Context is initialized to PROJ.
STEP_D_DEPLOY = '
  echo ~~ $PROJ_NAME : deploy ...

  skipContextIfPassWP() $PROJ_BIN_TYPE "phony"

  /// Extract ready-made lists from named containers.
  LS_HDR_PUB = listItem() SRC_HDR_PUB
  LS_DOC_PUB = listItem() SRC_DOC_PUB
  /// (optional) Display variables.
  // varsDump PROJ_BIN_FILE LS_HDR_PUB LS_DOC_PUB

  copyBinFilesToDirs() "$PROJ_BIN_FILE" "$S_DEPLOY_DIR/$S_DEPLOY_SUBDIR_BIN"
  copyFilesToDirs() "$LS_HDR_PUB" "$S_DEPLOY_DIR/$S_DEPLOY_SUBDIR_INC"
  copyFilesToDirs() "$LS_DOC_PUB" "$S_DEPLOY_DIR/$S_DEPLOY_SUBDIR_DOC"

  setContextProj()
  echo ~~ $PROJ_NAME : deploy : done
'

# ----------

# Called at the end of each project.
#     Context is initialized to PROJ.
STEP_E_EXPORT = '
  --
  // Step disabled by '--'. Enable if needed.

  // echo ~~ $PROJ_NAME : export ...
  //
  // Commands to run AFTER this project ends.
  // (postponed tasks, time consuming but still important)
  //
  // ? extra steps for this (sub)project
  //
  // OR use the same hook-script as Abcd
  // bash build_proj_done.sh
  //
  // echo ~~ $PROJ_NAME : export : done
'

# Called at the end of the top project.
#     Context is initialized to PROJ.
# Commands to run AFTER the whole build completes.
#   Eg. postponed tasks, time-consuming but still important tasks.
STEP_E_EXPORT_AT_TOP_PROJ = '
  echo ~~ $PROJ_NAME : export at top ...

  // ? coding rules
  // ? coding quality
  // ? make final reports
  // ? send release archives to another computer
  // OR use the same hook-script as Abcd
  // bash build_top_done.sh
  //
  // Notify success, possibly send email.

  echo ~~ $PROJ_NAME : export at top : done
'

# ----------

# STEP_FAILURE* is called after at least one step has failed.
#     Context is initialized to PROJ.
#   Use the '-' prefix to continue after commands that return an error code.
#   The final error code is influenced by this step.

/// This is for each project for which build has begun.
///   Therefore, multiple notifications may appear, but not from all projects.
///   This is usually empty, but your needs may vary.
STEP_FAILURE = '
  --
  // Step disabled by '--'. Enable if needed.
'

/// This is for the top-project and is called once at the end.
///   A build failure in a sub-project is also a failure for its parent project.
STEP_FAILURE_AT_TOP_PROJ = '
  echo !! $PROJ_NAME : build failed!
  // Notify of failure, possibly send email.
'

# ----------

# At each step in this list: rescans the file system to take into account
#   newly created or deleted files in previous steps.
# Notes:
# * Usually this list is either empty either possibly "STEP_B_BUILD"
#   to account for changes previously made in step "STEP_A_ADAPT".
# * The use case is different from user-made changes between builds,
#   which are handled implicitly.
# * This use case is for scripts or other tools run in previous steps
#   that may create or delete files between steps,
#   source files that need to be considered for building or not.
# * If only the contents of existing source files are changed by those scripts,
#   there is no need to rescan.
LS_RESCAN_AT_STEP = ""

# ----------
