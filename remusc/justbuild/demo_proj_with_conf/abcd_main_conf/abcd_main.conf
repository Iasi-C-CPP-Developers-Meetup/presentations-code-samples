#// abc,abcd,justbuild syntax
# Main Config
# --------------------

# Config is read in the following order.
#
# Main Config : defines the defaults for all projects.
#   Can be in one file, can be defined in several files.
#   Organize the config how you like it.
#   Another config file is used only if it is included.
#
# Local Project Config: overwrite variables specific to that project.
#   When the file does not exist, but it should exist,
#   "abcd.conf" from Main Config dir is copied in project dir.
#   "abcd.conf" in project dir Must be adapted before use.
#
# Main Final Config: overwrite variables for all projects.
#   Allows final rules to be applied to all projects.
# e.g.
#   Change the order of flags in some lists set in Local Project Config.
#   Use specific environment variables.
#   _MY_VAR_DEFINES = "$DEFINES $_MY_VAR_DEFINES"
#   DEFINES = ""
#
# ~Any~ variable can be overwritten later.
#   Exceptions: few predefined internal vars.
#
// This is a commented line.
# This is a commented line.

# ---------- generic

include "$CONF_MAIN_DIR/conf-main/_project-control.conf"
include "$CONF_MAIN_DIR/conf-main/_project-select-files.conf"
include "$CONF_MAIN_DIR/conf-main/link-restore.conf"
include "$CONF_MAIN_DIR/conf-main/tune-build-system.conf"

// Abcd only
-include "$CONF_MAIN_DIR/conf-main/$APP_INAME.build-tools.conf"
-include "$CONF_MAIN_DIR/conf-main/$APP_INAME.cmd-build-helpers.conf"
-include "$CONF_MAIN_DIR/conf-main/$APP_INAME.cmd-hooks.conf"
-include "$CONF_MAIN_DIR/conf-main/$APP_INAME.echo-markers.conf"

// JustBuild only
-include "$CONF_MAIN_DIR/conf-main/_$APP_INAME.build-steps.conf"

# ---------- OS specific settings
include "$CONF_MAIN_DIR/conf-main/specific-OS-any.conf"
include "$CONF_MAIN_DIR/conf-main/specific-OS-$OS_NAME.conf"

# ---------- build flags - for used LANG
# Note: S_LANG can be set in each project.

# ----------
# Compiler & Linker switch:
#   these are the main methods to switch to another set of build tools
#   for the same source language.
#
# * Project-specific
#   Define a LANG and appropriate compile & link commands & flags for each LANG.
#   The in each project use the desired name.
#
# * Global
#   Define a variable which contains a part of a file-system path.
#   Set the config structure such as:
#     by changing the switch variable
#     another set of files will be included,
#     and the same variables for compiler, linker and flags are used
#     with values to correspond with chosen build tools.
#
# These methods can be combined, in full or partially.
#
# Notes:
#   Flags which are set in Project Config
#     should correspond with the selected build tools.

# ---------- compiler & linker switch - project-specific way
# Using a new LANG is the recommended way,
#   to allow each project in a group to use its own build tools.
# e.g.
#   Instead of CPP, in Main Config,
#     use CPP_GCC and CPP_CLANG,
#     and for each set the compiler, linker, etc.
#   Then in each project, use the desired LANG = ...
#   The config for already defined languages C and CPP can be used as example.

# ---------- compiler & linker switch - global way
# This is an alternate method to switch to another set of build tools,
#   for all projects,
#   without the need to change LANG in each project.
# _USE_COMPILER_SUITE = "gcc"
_USE_COMPILER_SUITE = "clang"

# ---------- (optional) extra: Host specific & internal tests
-include "$CONF_MAIN_DIR/conf-extra/extra_main.conf"

# EOF #
