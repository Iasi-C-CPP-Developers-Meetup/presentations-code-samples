#// abc,abcd,justbuild syntax
# Main Config
# -------------------- Project: control how to build.

# ---------- Variables usually set in Local Project Config

# One lang allowed here: C CPP CPM *user_defined_lang*
S_LANG  = "CPP"

# "_ test ..." to enable testing by default. Disable by project.
# "_" to ignore testing by default. Enable them in each project as appropriate.
# Allow also *user_defined_arch*.
LS_ARCH = "_ test"

# This MUST be set for each project.
#   Alternatively it can be set in config file name, like this:
#     `abcd.<bin-type>.conf`.
#   When it is set in the file name, avoid setting it inside the file as well.
#   A non-empty default value can be set in Main Config.
#
# Represents the output binary file type:
#   phony : no binary target
#           can be used projects which only group other projects
#           [default] value assigned when empty
#   exe   : executable
#   shlib : shared library
#   stlib : static library
#   phlib : phony library, no binary target
#           can be used for a header-only library
#
PROJ_BIN_TYPE = "" # phony[default] exe shlib stlib==lib phlib

# For each ARCH:
# * ARCH_BIN_TYPE is set to PROJ_BIN_TYPE_ARCH_$ArchName.
# * ARCH_BIN_NAME is set from PROJ_NAME and ARCH_NAME.
# * ARCH_BIN_FILE is set from ARCH_BIN_NAME and file extension, if any.
#   If this value is empty then PROJ_BIN_TYPE is used.
# * PROJ_BIN_TYPE_ARCH_$ArchName is set to ARCH_BIN_TYPE.
#
# ARCH_BIN_TYPE for any ARCH can be set using PROJ_BIN_TYPE_ARCH_$ArchName.
#
# For the "test" ARCH, the output binary is usually an executable.
PROJ_BIN_TYPE_ARCH_test  = "exe"
PROJ_BIN_TYPE_ARCH_test1 = "exe"
PROJ_BIN_TYPE_ARCH_test_fail  = "exe"
PROJ_BIN_TYPE_ARCH_test1_fail = "exe"

# ---------- Global values
# Values for:
# * project language set by S_LANG
# * all architectures defined in LS_ARCH

# Compiler and linker flags.
#   These are the main flags variables.
# e.g.
#   "-v -Os -O3 -Og"
#   "-Og" should be the last for coverage to work
LS_COMPILE_FLAGS = ""
LS_LINK_FLAGS    = ""

# This is for your libraries.
#   Build-dir-prefix is used.
#   list: "LibName1 LibName2"
# Each item is added to LS_LINK_FLAGS.
#   S_FLAG_* values are used.
LS_NEED_LIBS = ""

# Header-only libraries.
#   Build-dir-prefix is used.
#   list: "LibName1 LibName2"
# Each item is added to LS_LINK_FLAGS.
#   S_FLAG_* values are used.
# Note:
#   When Build-dir-prefix should Not be used,
#   use the corresponding LS_LINK_FLAGS* variable.
LS_NEED_LIBS_HDR = ""

# Standard binary-only libraries, OS-specific.
#   Build-dir-prefix is Not used in this case.
# Each item is added to LS_LINK_FLAGS.
#   S_FLAG_* values are used.
LS_NEED_LIBS_STD = ""

# ---------- (optional) Values by context
# Result for a build command:
#   VV = VV_LANG_LL VV_ARCH_AA VV VV_OS_*
#   VV is a flag variable.
# Lists of strings are appended in that order, separated by spaces.
# Empty or undefined variables are ignored.

# Lang specific variables.
#   name format: VV_LANG_LL
# where:
#   VV is the original variable name
#   LL is the language name set by in S_LANG
# Example:
#   In context of Lang "x", VARNAME = "$VARNAME $VARNAME_LANG_x"
LS_COMPILE_FLAGS_LANG_C    = ""
LS_COMPILE_FLAGS_LANG_CPP  = ""
LS_COMPILE_FLAGS_LANG_CPM  = ""

LS_LINK_FLAGS_LANG_C   = ""
LS_LINK_FLAGS_LANG_CPP = ""
LS_LINK_FLAGS_LANG_CPM = ""

# Arch specific variables.
#   name format: VV_ARCH_AA
# where:
#   VV is used for the variable name
#   AA is the arch name in LS_ARCH
# Example:
#   In context of Arch "x", VARNAME = "$VARNAME $VARNAME_ARCH_x"
# Note:
#   "_" is used for 1st (and default) arch name.
#   Hence 2x "_" in variable name.
#   For each additional ARCH defined in LS_ARCH,
#     if the variable is not defined,
#     then the value is taken from ARCH "_".
LS_COMPILE_FLAGS_ARCH__ = ""
LS_COMPILE_FLAGS_ARCH_test = ""

LS_LINK_FLAGS_ARCH__ = ""
LS_LINK_FLAGS_ARCH_test = ""

# Additional libraries, specific to each ARCH. Empty for main ARCH.
# Note that where an ARCH is not active, the corresponding variable is ignored.
LS_NEED_LIBS_ARCH__ = ""
# Replace with the test libraries you use everywhere.
#   Otherwise, comment out this line
#   and set the variable in projects that need a test library.
LS_NEED_LIBS_ARCH_test = "UITbogusLib"

# Header-only libraries. Empty for main ARCH.
LS_NEED_LIBS_HDR_ARCH__     = ""
# Replace with the header-only test libraries you use everywhere.
#   Otherwise, comment out this line
#   and set the variable in projects that need a header-only test library.
LS_NEED_LIBS_HDR_ARCH_test  = "UITbogusHdrOnly"

# Standard binary-only libraries.
LS_NEED_LIBS_STD_ARCH__     = ""
LS_NEED_LIBS_STD_ARCH_test  = ""

# IDE specific variable.
#   Not used during build.
# Indicates header libraries, additional to the main ARCH,
#   that can be used for auto-completion during editing.
# This is to avoid, for the IDE,
#   mixing the main ARCH with unwanted secondary ARCH headers and flags.
# It usually points to test libraries,
#   even if tests are not yet active in all projects.
LS_IDE_NEED_LIBS_HDR = "$LS_NEED_LIBS_ARCH_test $LS_NEED_LIBS_HDR_ARCH_test"

# IDE specific variable.
#   Not used during build.
# Indicates additional raw directories with headers,
#   which can be used for auto-completion during editing.
# Usually points to external libraries.
LS_IDE_INC_DIRS_STD = ""
LS_IDE_INC_DIRS_STD_OS_Linux = ""
LS_IDE_INC_DIRS_STD_OS_Windows = ""

# ---------- (optional) OS Values by context
# Usually in projects some Flags variables are set,
#   overriding default global values, as intended.
# However, to keep some important global values
#   without propagating them in each special project,
#   some complicated code is required.
# These variable can be set globally,
#   to allow a clean configuration,
#   to avoid VAR = "$VAR added-value", or other logic with "include".
# e.g.
#   in project config:
#     LS_NEED_LIBS_STD_OS_Linux   = "stdc ..."
#     LS_NEED_LIBS_STD_OS_Windows = "kernel32 user32 ..."
# Note:
#   These variables can still be reset in projects, to allow full control.
#

LS_COMPILE_FLAGS_OS_Linux    = ""
LS_COMPILE_FLAGS_OS_Windows  = ""

LS_LINK_FLAGS_OS_Linux   = ""
LS_LINK_FLAGS_OS_Windows = ""

LS_NEED_LIBS_OS_Linux   = ""
LS_NEED_LIBS_OS_Windows = ""

# Header-only libraries.
LS_NEED_LIBS_HDR_OS_Linux    = ""
LS_NEED_LIBS_HDR_OS_Windows  = ""

# Standard binary-only libraries.
LS_NEED_LIBS_STD_OS_Linux    = ""
LS_NEED_LIBS_STD_OS_Windows  = ""

# ----------

# skip deploy step for these
LS_SKIP_DEPLOY_FOR_ARCH = "test"
LS_SKIP_DEPLOY_FOR_BIN_TYPE = "phony"

# Extra depedencies for sub-projects.
# Useful when:
# * External sub-projects (e.g. with ../dir_name) are used (indirectly),
#   and these sub-projects are not (and should not be) in lib-dependencies
#   and a specific order is required for a correct parallel build.
# * Test-arch contains integration tests with extra dependencies.
#   These new dependencies should not pollute the ones for the main arch.
#   Still, those should be build before, for the parallel build to work.
TXT_WANT_DEP_ORDER  = ""

# Deploy subdirectories
# S_DEPLOY_SUBDIR_BIN will be set, depending on PROJ_BIN_TYPE,
#    to either S_DEPLOY_SUBDIR_EXE or S_DEPLOY_SUBDIR_LIB
S_DEPLOY_SUBDIR_EXE = "bin"
S_DEPLOY_SUBDIR_LIB = "lib"
S_DEPLOY_SUBDIR_INC = "include"
S_DEPLOY_SUBDIR_DOC = "doc"

# ----------

# Uncomment to use ccache.
# _OS_USE_CCACHE = "ccache "

# ----------

# Local Project Conf standard file name is "abcd.conf".
#   Target binary type is the single must-have value for each project,
#     provided the Main Configuration matches.
#   Now it is possible to specify the binary type in file name,
#     for scripts and for the user to see it in the file-system and in IDE,
#     without the need to open Project Conf file and search for the value.
# Note:
#   It is the developer's choice to use the standard file name or this variant.
# e.g.:
#   "abcd.conf" was renamed to "abcd.exe.conf".
#   In this case, in "abcd.exe.conf":
#   - Not specifying PROJ_BIN_TYPE = "exe" is ok.
#   - Specifying PROJ_BIN_TYPE = "exe" is redundant but ok.
#   - Specifying PROJ_BIN_TYPE = "something-else" is an error.
#   - Add only deviations from Main Config, as usual.
#     If no other deviations are required, this file can be empty.

# ----------

# EOF #
